initSidebarItems({"constant":[["AUDIO_BUFFER","The audio buffer container, set and cleared in `S_PaintChannels()`."]],"enum":[["FrameCapture",""],["SoundCaptureMode",""]],"fn":[["CL_Disconnect","Stops the currently running game, returning to the main menu."],["Con_ToggleConsole_f","Handler for the `toggleconsole` command."],["GL_SetMode","Sets up the main FBOs and the display mode."],["Host_FilterTime","Calculates the frame time and limits the FPS."],["Key_Event","Handles key callbacks."],["Memory_Init","Initializes the hunk memory."],["RunListenServer","The \"main\" function of hw.so, called inside `CEngineAPI::Run()`."],["S_PaintChannels","Mixes sound into the output buffer using the paintbuffer."],["S_TransferStereo16","Transfers the contents of the paintbuffer into the output buffer."],["Sys_VID_FlipScreen","Flips the screen."],["VideoMode_IsWindowed","Returns whether the game is running in windowed mode."],["build_ocl_buffer","Builds an ocl `Buffer` with the specified length."],["build_ocl_image","Builds an ocl `Image` with the specified dimensions."],["build_yuv_buffers","Builds ocl YUV buffers with the specified length."],["capture_frame","Captures and returns the current frame."],["capture_remaining_sound","Captures the remaining and extra sound."],["cmd_argc","Gets the console command argument count."],["cmd_argv","Gets a console command argument."],["con_print","Prints the given string to the game console."],["get_opengl_context","Retrieves the current OpenGL context."],["get_pro_que","Returns the ocl `ProCue`."],["get_resolution","Returns the current game resolution."],["get_yuv_buffers_and_pro_que","Returns the ocl buffers for Y, U and V, (HACK:) as well as a `ProQue`."],["ocl_color_conversion_func_name","Gets the OpenCL RGB->YUV color conversion function name."],["read_ocl_image_into_buf","Reads the given `ocl::Image` into the buffer."],["read_pixels","Reads pixels into the buffer."],["refresh_pointers","Obtains and stores all necessary function and variable addresses."],["register_command","Registers a console command."],["register_cvars_and_commands","Registers console commands and variables."],["register_variable","Registers a console variable."],["reset_pointers","Resets all pointers to their default values."],["reset_sound_capture_remainder","Resets the sound capture remainder."]],"static":[["FUNCTIONS",""],["POINTERS",""],["cap_allow_tabbing_out_in_demos",""],["cap_playdemostop",""]],"struct":[["CGame",""],["FBO_Container_t",""],["Functions","Pointers to all used hw functions."],["OclGlTexture","Wrapper for the OpenCL image created from an OpenGL texture."],["Pointers","Pointers to all used hw variables."],["RECT",""],["client_static_t",""],["dma_t",""],["portable_samplepair_t",""]],"type":[["Result",""]]});